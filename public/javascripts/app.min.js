var app=angular.module("recipeCreator",["ngMaterial","ngRoute","angular-jwt"]);app.config(["$routeProvider","$locationProvider","$mdThemingProvider","$httpProvider","jwtInterceptorProvider",function(e,t,r,n,o){t.html5Mode(!0),o.tokenGetter=function(){return sessionStorage.getItem("userToken")},n.interceptors.push("jwtInterceptor"),r.theme("default").primaryPalette("amber").accentPalette("yellow"),e.when("/",{templateUrl:"/views/recipes.html",controller:"recipeMake"}).when("/dbsg_calc",{templateUrl:"/views/dbsgcalc.html",controller:"dbsgCalc"}).when("/login",{templateUrl:"/views/login.html",controller:"loginControl"}).when("/register",{templateUrl:"/views/register.html",controller:"registerControl"}).otherwise("/",{templateUrl:"/views/recipes.html",controller:"recipeMake"})}]),app.directive("isMatch",function(){return{require:"ngModel",scope:{otherVal:"=isMatch"},link:function(e,t,r,n){n.$validators.isMatch=function(t){return t===e.otherVal},e.$watch("otherVal",function(){n.$validate()})}}}),app.service("PpgCalc",function(){this.calcPpg=function(e){return 1e3*(1+e/100*.04621)/1e3}}),app.controller("recipeMake",["$scope","$http","jwtHelper",function(e,t,r){function n(r){t({method:"GET",url:"/"+r}).then(function(t){e[r]=t.data})}e.user={},e.user.recipetemplate="/views/notloggedin.html",n("grains"),n("hops"),n("yeasts"),e.recipe={name:"",grains:{totalWeight:function(){var t=0;return e.recipe.grains.added.forEach(function(e,r){e.grainWt>0&&(t+=parseInt(e.grainWt))}),t},totalPPG:function(){var t=0;return e.recipe.grains.added.forEach(function(r,n){t+=Math.round(1e3*(r.PPG-1)*r.grainWt/e.recipe.volume)/1e3}),t},efficiencyPPG:function(){var t=Math.round(e.recipe.grains.totalPPG()*(e.recipe.efficiency/100)*1e3)/1e3+1;return t>1.5&&(t=1.5),t.toString().length>5&&(t=t.toString().slice(0,5)),t},added:[]},efficiency:65,attenuation:70,volume:5,hops:{added:[],ibu:function(){if(e.recipe.hops.added.length>0&&e.recipe.grains.added.length>0){var t=0,r=0,n=1.65*Math.pow(125e-6,e.recipe.og()-1);return e.recipe.hops.added.forEach(function(o){if(r=o.hopWt*(o.Alpha_Acid/100)*7490/e.recipe.volume,"boil"==o.hopType){var i=(1-Math.pow(2.718281828459045,-.04*o.hopTime))/3.8,a=n*i;t+=a*r}else if("whirlpool"==o.hopType){var a=.1;t+=a*r}}),Math.round(100*t)/100}return 0}},og:function(){return e.recipe.grains.added.length>0?e.recipe.grains.efficiencyPPG():0},fg:function(){if(e.recipe.grains.added.length>0){var t=Math.round(1e3*(e.recipe.grains.efficiencyPPG()-1)*(e.recipe.attenuation/100))/1e3;return t=e.recipe.og()-t,t.toString().length>5&&(t=t.toString().slice(0,5)),t}return 0},abv:function(){if(e.recipe.grains.added.length>0){var t=e.recipe.og(),r=e.recipe.fg();return Math.round(76.08*(t-r)/(1.775-t)*(r/.794)*100)/100}return 0},srm:function(){if(e.recipe.grains.added.length>0){var t=0,r=e.recipe.grains.added.forEach(function(e,r){t+=e.lovi*e.grainWt});return r=t/e.recipe.volume,r=Math.round(1.4922*Math.pow(r,.6859)*100)/100,r>50&&(r=50),r}return 0},dp:function(){if(e.recipe.grains.added.length>0){var t=0;return e.recipe.grains.added.forEach(function(e,r){t+=e.dp*e.grainWt}),Math.round(t/e.recipe.grains.totalWeight())}return 0},notes:"",yeast:e.yeast},e.saveRecipe=function(){var r={username:e.user.username,name:e.recipe.name,grains:{added:e.recipe.grains.added},efficiency:e.recipe.efficiency,volume:e.recipe.volume,attenuation:e.recipe.attenuation,hops:{added:e.recipe.hops.added},notes:e.notes};t({method:"post",url:"/private/recipes",data:r}).then(function(e){console.log(e.data)})},e.getSavedRecipes=function(){t({method:"post",url:"/private/recipes/saved"}).then(function(e){console.log(e.data)})},e.addIngredient=function(t,r){e.recipe[t].added.push(e[r]),e[r]={}},e.deleteItem=function(t,r){e.recipe[r].added.splice(t,1)},e.$watch(function(){return sessionStorage.getItem("userToken")},function(){if(sessionStorage.getItem("userToken")){var t=r.decodeToken(sessionStorage.getItem("userToken"));e.user=t,e.user.recipetemplate="/private/views/savedrecipes.html"}else e.user={},e.user.recipetemplate="/views/notloggedin.html"})}]),app.controller("dbsgCalc",["$scope",function(e){console.log("clicked"),console.log(e.dbfg+e.name)}]),app.controller("loginControl",["$rootScope","$scope","$http","$location",function(e,t,r,n){t.userLogin=function(){r({method:"post",data:t.user,url:"/loginauth"}).then(function(e){e.data.token&&(sessionStorage.setItem("userToken",e.data.token),t.user={},n.url("/"))},function(e){t.error=e.data,t.user.password=""})}}]),app.controller("registerControl",["$scope","$http","$location",function(e,t,r){e.registerUser=function(){t({method:"post",data:e.user,url:"/register"}).then(function(t){e.user=t.data,r.url("/login")},function(t){e.user=t.data})}}]),app.controller("headerControl",["$rootScope","$scope","jwtHelper",function(e,t,r){t.user={},t.$watch(function(){return sessionStorage.getItem("userToken")},function(){sessionStorage.getItem("userToken")?(t.user=r.decodeToken(sessionStorage.getItem("userToken")),t.user.login="Logout "+t.user.username,t.user.loginUrl="/"):(t.user={},t.user.login="Login/Register",t.user.loginUrl="/login")}),t.logOut=function(){sessionStorage.removeItem("userToken")}}]);
//# sourceMappingURL=data:application/json;base64,